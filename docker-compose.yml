services:
  db:
    image: postgis/postgis:16-3.4
    container_name: market_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h 127.0.0.1"]
      interval: 5s
      timeout: 3s
      retries: 30
    restart: unless-stopped

  redis:
    image: redis:7
    container_name: market_redis
    restart: unless-stopped
    command: ["redis-server","--appendonly","yes"]
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD","redis-cli","ping"]
      interval: 5s
      timeout: 3s
      retries: 30

  minio:
    image: minio/minio:latest
    container_name: market_minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"   
      - "9001:9001"   
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD","curl","-f","http://127.0.0.1:9000/minio/health/live"]
      interval: 5s
      timeout: 3s
      retries: 30

  minio-init:
    image: minio/mc:latest
    container_name: market_minio_init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set local http://minio:9000 ${S3_ACCESS_KEY} ${S3_SECRET_KEY} && 
      mc mb -p local/${S3_BUCKET} || true &&
      mc anonymous set download local/${S3_BUCKET} || true &&
      exit 0
      "
    restart: "no"

volumes:
  pgdata:
  redisdata:
  minio_data:
